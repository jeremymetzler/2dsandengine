#include "header_stack.h"

//http://javl.github.io/image2cpp/

void CompiledCharData::MoveChar(float xsteps, float ysteps)
{
	for (Vec2Df& pos : charData)
	{
		pos.x += xsteps;
		pos.y += ysteps;
	}
}

void CompiledCharData::ScaleChar(float scale)
{
	for (Vec2Df& pos : charData)
	{
		pos.x *= scale;
		pos.y *= scale;
	}
}

CompiledCharData* firstFontCompiled = nullptr;

CompiledCharData* CustRender::getFirstFont()
{
	return firstFontCompiled;
}


std::vector<CustRender::ClipInfo_t>CustRender::clipList = std::vector<CustRender::ClipInfo_t>();
std::vector<StringFormation*> CustRender::StringStack;

StringFormation* CustRender::pushString(int xPos, int yPos, std::string sText, CompiledCharData* cFont, ColorM clrc, float fTextScale, int iPixelSize)
{
	int index = static_cast<int>(StringStack.size());
	StringStack.push_back(new StringFormation(xPos, yPos, sText, cFont, clrc, fTextScale, iPixelSize));
	StringStack[index]->index = index;
	return StringStack[index];
}

void CustRender::deleteString(StringFormation*& sString)
{
	if (sString)
	{
		int index = sString->index;
		for (int i = index; i < StringStack.size(); i++)
		{
			StringStack[i]->index -= 1;
		}

		for (CompiledCharData& strDat : sString->stringData)
		{
			strDat.charData.clear();
		}

		sString->chosenFont = nullptr;
		sString->stringData.clear();

		delete[] StringStack[index];

		StringStack.erase(StringStack.begin() + index);

		sString = nullptr;
	}
}

void CustRender::deleteStringByIndex(int index)
{
	if (index < StringStack.size() && index >= 0)
	{
		for (int i = index; i < StringStack.size(); i++)
		{
			StringStack[i]->index -= 1;
		}

		StringFormation* sString = StringStack[index];

		for (CompiledCharData& strDat : sString->stringData)
		{
			strDat.charData.clear();
		}

		sString->chosenFont = nullptr;
		sString->stringData.clear();

		delete[] StringStack[index];

		StringStack.erase(StringStack.begin() + index);
	}
}

const int epd_bitmap_allArray_LEN = 128;

void CustRender::CompileFont(const unsigned char** cFont, int byteCount, CompiledCharData* compiledFont,int iWidth, int iHeight)
{
	StringStack.clear();

	for (int i = 0; i < epd_bitmap_allArray_LEN; i++)
	{
		const unsigned char* dataPtr = cFont[i]; // gets the char draw data
		if (!dataPtr) // if the char draw data is nullptr then skip
			continue;

		CompiledCharData& charRef = compiledFont[i];

		charRef.width = iWidth;
		charRef.height = iHeight;

		if (i == 32) // if its the space character
		{
			charRef.leftOffset = 0;
			charRef.rightOffset = charRef.width;
			charRef.topOffset = charRef.height;
			charRef.bottomOffset = 0;
			continue;
		}
		else if (i == 103 || i == 106 || i == 112 || i == 113 || i == 121)
		{
			charRef.height -= 7;
		}
		

		int xOffset = 0;// the line for the drawing queue
		int yStep = charRef.height; // top of the character space 22 is the hardcoded height of the char

		int leftSide = 100;
		int rightSide = -1;
		int topSide = 100;
		int bottomSide = -1;

		for (int ii = 0; ii < byteCount; ii++)// loops through all the bytes in the char draw data array
		{
			unsigned char curData = dataPtr[ii];// gets the specific byte in the array

			if (xOffset >= charRef.width) // reached the end of this line to draw
			{
				xOffset = 0;// reset the line for the drawing queue
				yStep -= 1; // goes down to ready the next line for drawing
			}

			for (int iii = 7; iii >= 0; iii--)// reverse reads the bits in the byte
			{
				if (xOffset >= charRef.width) // breaks the loop when reaching the end of the line just how the data is formatted for the converter i used
					break;
				if (!(curData & (1 << iii)))// if there is no bit in this position draw a pixel
				{
					charRef.charData.push_back({xOffset, yStep});// bushes the bit position to the chardata Vec2Df

					if (leftSide > xOffset)// left bound
					{
						leftSide = xOffset;
					}

					if (rightSide < xOffset)// right bound 
					{
						rightSide = xOffset;
					}

					if (topSide > yStep)// top bound
					{
						topSide = yStep;
					}

					if (bottomSide < yStep)// bottom bound
					{
						bottomSide = yStep;
					}
				}

				xOffset += 1;// continues the line
			}
		}
		
		int boundrySize = 3; // how far the char is offset on each side

		charRef.leftOffset = leftSide - boundrySize;
		charRef.rightOffset = rightSide + boundrySize;
		charRef.topOffset = topSide + boundrySize;
		charRef.bottomOffset = bottomSide - boundrySize;
	}
}

void CustRender::CompileFonts() // not ideal TODO: read fonts from a file
{

	firstFontCompiled = new CompiledCharData[epd_bitmap_allArray_LEN];

		// '!', 19x22px
	const unsigned char epd_bitmap_exmark[] = {
			0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
			0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf,
			0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0,
			0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
			0xbf, 0xe0
	};
	// 'quote', 19x22px
	const unsigned char epd_bitmap_quote[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfe, 0xef, 0xe0, 0xfe, 0xef, 0xe0, 0xfe,
		0xef, 0xe0, 0xfe, 0xef, 0xe0, 0xfe, 0xef, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// '#', 19x22px
	const unsigned char epd_bitmap_pound[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0x7e, 0xe0, 0xff, 0x7e, 0xe0, 0xfe, 0xfd, 0xe0, 0xfe, 0xfd, 0xe0, 0x80, 0x00, 0x20, 0xfd, 0xfb,
		0xe0, 0xfd, 0xfb, 0xe0, 0xfb, 0xf7, 0xe0, 0xfb, 0xf7, 0xe0, 0xfb, 0xf7, 0xe0, 0xf7, 0xef, 0xe0,
		0xf7, 0xef, 0xe0, 0x80, 0x00, 0x60, 0xef, 0xdf, 0xe0, 0xef, 0xdf, 0xe0, 0xdf, 0xbf, 0xe0, 0xdf,
		0xbf, 0xe0
	};
	// '$', 19x22px
	const unsigned char epd_bitmap_cash[] = {
		0xff, 0xff, 0xe0, 0xfd, 0xdf, 0xe0, 0xfd, 0xdf, 0xe0, 0xfd, 0xdf, 0xe0, 0xfd, 0x1f, 0xe0, 0xf8,
		0xc7, 0xe0, 0xf5, 0xdb, 0xe0, 0xed, 0xdf, 0xe0, 0xdd, 0xdf, 0xe0, 0xdd, 0xdf, 0xe0, 0xed, 0xdf,
		0xe0, 0xed, 0xdf, 0xe0, 0xf0, 0xdf, 0xe0, 0xfd, 0x0f, 0xe0, 0xfd, 0xd7, 0xe0, 0xfd, 0xdb, 0xe0,
		0xfd, 0xdd, 0xe0, 0xdd, 0xdb, 0xe0, 0xe5, 0xd7, 0xe0, 0xf9, 0xcf, 0xe0, 0xfc, 0x1f, 0xe0, 0xfd,
		0xdf, 0xe0
	};
	// '%', 19x22px
	const unsigned char epd_bitmap_percent[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfc, 0xff, 0xe0, 0xfb, 0x7f, 0xe0, 0xf7,
		0xbf, 0xe0, 0xf7, 0xbf, 0xe0, 0xf7, 0xbf, 0xe0, 0xfb, 0x7c, 0xe0, 0xfc, 0xf3, 0xe0, 0xff, 0xcf,
		0xe0, 0xfe, 0x3f, 0xe0, 0xf9, 0xf3, 0xe0, 0xe7, 0xed, 0xe0, 0xff, 0xde, 0xe0, 0xff, 0xde, 0xe0,
		0xff, 0xde, 0xe0, 0xff, 0xed, 0xe0, 0xff, 0xf3, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// '&', 19x22px
	const unsigned char epd_bitmap_and[] = {
		0xf8, 0x7f, 0xe0, 0xf3, 0x3f, 0xe0, 0xe7, 0x9f, 0xe0, 0xef, 0xdf, 0xe0, 0xef, 0x9f, 0xe0, 0xef,
		0xbf, 0xe0, 0xef, 0x3f, 0xe0, 0xef, 0x7f, 0xe0, 0xe4, 0x7f, 0xe0, 0xf1, 0xff, 0xe0, 0xf9, 0xff,
		0xe0, 0xf0, 0xfd, 0xe0, 0xe6, 0x79, 0xe0, 0xef, 0x3b, 0xe0, 0xcf, 0x93, 0xe0, 0xdf, 0xc7, 0xe0,
		0xdf, 0xe7, 0xe0, 0xdf, 0xe3, 0xe0, 0xdf, 0xe9, 0xe0, 0xcf, 0xcc, 0x60, 0xe7, 0x9f, 0x60, 0xf0,
		0x3f, 0xe0
	};
	// ''', 19x22px
	const unsigned char epd_bitmap_singlequote[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff,
		0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// '(', 19x22px
	const unsigned char epd_bitmap_openparenth[] = {
		0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xfe, 0xff, 0xe0, 0xfe,
		0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfb, 0xff, 0xe0, 0xfb, 0xff, 0xe0, 0xfb, 0xff,
		0xe0, 0xfb, 0xff, 0xe0, 0xfb, 0xff, 0xe0, 0xfb, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0,
		0xfe, 0xff, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// ')', 19x22px
	const unsigned char epd_bitmap_closeparenth[] = {
		0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xef, 0xe0, 0xff,
		0xef, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xfb,
		0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0,
		0xff, 0xef, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// 'star', 19x22px
	const unsigned char epd_bitmap_star[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xfc, 0x47, 0xe0, 0xfe,
		0xef, 0xe0, 0xff, 0x5f, 0xe0, 0xfe, 0x0f, 0xe0, 0xfe, 0xef, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// '+', 19x22px
	const unsigned char epd_bitmap_plus[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf,
		0xe0, 0xe0, 0x00, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0,
		0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// ',', 19x22px
	const unsigned char epd_bitmap_comma[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xe7, 0xe0, 0xff, 0xc7, 0xe0, 0xff, 0x8f, 0xe0, 0xff, 0x1f, 0xe0, 0xff,
		0x3f, 0xe0
	};
	// '-', 19x22px
	const unsigned char epd_bitmap_minus[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xe0, 0x00, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// 'period', 19x22px
	const unsigned char epd_bitmap_period[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0x3f, 0xe0, 0xff,
		0x3f, 0xe0
	};
	// 'forwardslash', 19x22px
	const unsigned char epd_bitmap_forwardslash[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff,
		0xfb, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef,
		0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0x7f, 0xe0,
		0xff, 0x7f, 0xe0, 0xfe, 0xff, 0xe0, 0xfe, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfb,
		0xff, 0xe0
	};
	// '0', 19x22px
	const unsigned char epd_bitmap_0[] = {
		0xff, 0xff, 0xe0, 0xff, 0x0f, 0xe0, 0xfe, 0xf7, 0xe0, 0xfd, 0xfb, 0xe0, 0xfb, 0xfd, 0xe0, 0xf7,
		0xfe, 0xe0, 0xf7, 0xfe, 0xe0, 0xf7, 0xfe, 0xe0, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff,
		0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xfe, 0xe0,
		0xf7, 0xfe, 0xe0, 0xf7, 0xfe, 0xe0, 0xfb, 0xfd, 0xe0, 0xfd, 0xfb, 0xe0, 0xfe, 0xf7, 0xe0, 0xff,
		0x0f, 0xe0
	};
	// '1', 19x22px
	const unsigned char epd_bitmap_1[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0x3f, 0xe0, 0xfe,
		0xbf, 0xe0, 0xfd, 0xbf, 0xe0, 0xfb, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf,
		0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0,
		0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xf8,
		0x03, 0xe0
	};
	// '2', 19x22px
	const unsigned char epd_bitmap_2[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0x0f, 0xe0, 0xfc, 0xf1, 0xe0, 0xf3,
		0xfd, 0xe0, 0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0, 0xef, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xff, 0xff,
		0x60, 0xff, 0xfc, 0xe0, 0xff, 0xf3, 0xe0, 0xff, 0xcf, 0xe0, 0xff, 0xbf, 0xe0, 0xfe, 0x7f, 0xe0,
		0xf9, 0xff, 0xe0, 0xe7, 0xff, 0xe0, 0xcf, 0xff, 0xe0, 0xdf, 0xff, 0xe0, 0xdf, 0xff, 0xe0, 0xc0,
		0x00, 0x60
	};
	// '3', 19x22px
	const unsigned char epd_bitmap_3[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0x0f, 0xe0, 0xfe, 0xf1, 0xe0, 0xf9, 0xfe, 0xe0, 0xe7,
		0xfe, 0xe0, 0xff, 0xff, 0x60, 0xff, 0xff, 0x60, 0xff, 0xff, 0x60, 0xff, 0xfe, 0xe0, 0xff, 0xfd,
		0xe0, 0xff, 0xc1, 0xe0, 0xfc, 0x3e, 0xe0, 0xff, 0xff, 0x60, 0xff, 0xff, 0x60, 0xff, 0xff, 0x60,
		0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xcf, 0xfd, 0xe0, 0xf3, 0xf3, 0xe0, 0xfc, 0xcf, 0xe0, 0xff,
		0x3f, 0xe0
	};
	// '4', 19x22px
	const unsigned char epd_bitmap_4[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xf3, 0xe0, 0xff, 0xeb, 0xe0, 0xff, 0xdb, 0xe0, 0xff,
		0xbb, 0xe0, 0xff, 0x7b, 0xe0, 0xfe, 0xfb, 0xe0, 0xfd, 0xfb, 0xe0, 0xfb, 0xfb, 0xe0, 0xf7, 0xfb,
		0xe0, 0xef, 0xfb, 0xe0, 0xc0, 0x00, 0x60, 0xff, 0xfb, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xfb, 0xe0,
		0xff, 0xfb, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xfb, 0xe0, 0xff,
		0xfb, 0xe0
	};
	// '5', 19x22px
	const unsigned char epd_bitmap_5[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xf0, 0x00, 0xe0, 0xf7,
		0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff,
		0xe0, 0xf0, 0x3f, 0xe0, 0xff, 0xc1, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfe, 0xe0,
		0xef, 0xfe, 0xe0, 0xf7, 0xfe, 0xe0, 0xf7, 0xfe, 0xe0, 0xfb, 0xf9, 0xe0, 0xf8, 0xe7, 0xe0, 0xff,
		0x1f, 0xe0
	};
	// '6', 19x22px
	const unsigned char epd_bitmap_6[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xe3, 0xe0, 0xfe, 0x1f, 0xe0, 0xfd, 0xff, 0xe0, 0xfb,
		0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff,
		0xe0, 0xee, 0x0f, 0xe0, 0xe9, 0xf3, 0xe0, 0xe7, 0xfd, 0xe0, 0xe7, 0xfd, 0xe0, 0xef, 0xfe, 0xe0,
		0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0, 0xef, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf9, 0xf3, 0xe0, 0xfe,
		0x0f, 0xe0
	};
	// '7', 19x22px
	const unsigned char epd_bitmap_7[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xe0, 0x00, 0xe0, 0xff, 0xfe, 0xe0, 0xff,
		0xfe, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xfb, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xef,
		0xe0, 0xff, 0xef, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0x7f, 0xe0,
		0xfe, 0xff, 0xe0, 0xfe, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfb, 0xff, 0xe0, 0xfb, 0xff, 0xe0, 0xf7,
		0xff, 0xe0
	};
	// '8', 19x22px
	const unsigned char epd_bitmap_8[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfe, 0x0f, 0xe0, 0xfd, 0xf7, 0xe0, 0xfb, 0xfb, 0xe0, 0xf7,
		0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xfb, 0xfb, 0xe0, 0xfd, 0xf7,
		0xe0, 0xfe, 0x0f, 0xe0, 0xf9, 0xf3, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xef, 0xfe, 0xe0,
		0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0, 0xef, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf9, 0xf3, 0xe0, 0xfe,
		0x0f, 0xe0
	};
	// '9', 19x22px
	const unsigned char epd_bitmap_9[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfe, 0x0f, 0xe0, 0xfd, 0xf7, 0xe0, 0xfb, 0xfb, 0xe0, 0xf7,
		0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xfb, 0xf9, 0xe0, 0xfd, 0xf3, 0xe0, 0xfe, 0x0b,
		0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xbf, 0xe0,
		0xff, 0xbf, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xfe, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd,
		0xff, 0xe0
	};
	// 'colon', 19x22px
	const unsigned char epd_bitmap_colon[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0x3f,
		0xe0, 0xff, 0x3f, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0x3f, 0xe0, 0xff,
		0x3f, 0xe0
	};
	// 'semicolon', 19x22px
	const unsigned char epd_bitmap_semicolon[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0x3f,
		0xe0, 0xff, 0x3f, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0x3f, 0xe0, 0xfe, 0x3f, 0xe0, 0xfc, 0x7f, 0xe0, 0xfc,
		0xff, 0xe0
	};
	// 'less', 19x22px
	const unsigned char epd_bitmap_less[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xf9, 0xe0, 0xff,
		0xe7, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0x3f, 0xe0, 0xfe, 0xff, 0xe0, 0xf9, 0xff, 0xe0, 0xe7, 0xff,
		0xe0, 0xdf, 0xff, 0xe0, 0xe7, 0xff, 0xe0, 0xf9, 0xff, 0xe0, 0xfe, 0xff, 0xe0, 0xff, 0x3f, 0xe0,
		0xff, 0xdf, 0xe0, 0xff, 0xe7, 0xe0, 0xff, 0xf9, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// 'equal', 19x22px
	const unsigned char epd_bitmap_equal[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xf8, 0x01, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xf8, 0x01, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// 'greatr', 19x22px
	const unsigned char epd_bitmap_greatr[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xf3, 0xff, 0xe0, 0xfc,
		0xff, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x9f, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xf3, 0xe0, 0xff, 0xfc,
		0xe0, 0xff, 0xff, 0x60, 0xff, 0xfc, 0xe0, 0xff, 0xf3, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0x9f, 0xe0,
		0xff, 0x7f, 0xe0, 0xfc, 0xff, 0xe0, 0xf3, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// 'questionmark', 19x22px
	const unsigned char epd_bitmap_questionmark[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0x07, 0xe0, 0xfe, 0x71, 0xe0, 0xfc, 0xfc, 0xe0, 0xfd,
		0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfc, 0xe0, 0xff, 0xfd,
		0xe0, 0xff, 0xf9, 0xe0, 0xff, 0x83, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0,
		0xff, 0xbf, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0
	};
	// 'atsymbol', 19x22px
	const unsigned char epd_bitmap_atsymbol[] = {
		0xff, 0x00, 0xe0, 0xf8, 0x7e, 0x60, 0xf3, 0xff, 0x20, 0xe7, 0xff, 0xa0, 0xcf, 0xff, 0xa0, 0x9f,
		0xff, 0xa0, 0xbf, 0xff, 0xa0, 0x3c, 0x0f, 0xa0, 0x79, 0xf3, 0xa0, 0x7b, 0xf8, 0x20, 0x73, 0xfe,
		0x60, 0x77, 0xfe, 0xe0, 0x77, 0xfe, 0xe0, 0x77, 0xfe, 0xe0, 0x77, 0xfc, 0x60, 0x73, 0xf9, 0x60,
		0x38, 0xe3, 0x20, 0xbe, 0x0f, 0xa0, 0x9f, 0xff, 0xe0, 0xcf, 0xff, 0xe0, 0xe7, 0xfc, 0xe0, 0xf0,
		0x01, 0xe0
	};

	const unsigned char epd_bitmap_uA[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0x1f, 0xe0, 0xfe, 0x5f, 0xe0, 0xfe,
		0xdf, 0xe0, 0xfd, 0xcf, 0xe0, 0xf9, 0xef, 0xe0, 0xfb, 0xe7, 0xe0, 0xfb, 0xf7, 0xe0, 0xf3, 0xf7,
		0xe0, 0xf7, 0xf3, 0xe0, 0xe7, 0xfb, 0xe0, 0xef, 0xfb, 0xe0, 0xc0, 0x01, 0xe0, 0xdf, 0xfd, 0xe0,
		0xdf, 0xfc, 0xe0, 0x9f, 0xfe, 0xe0, 0xbf, 0xfe, 0x60, 0x3f, 0xff, 0x60, 0x7f, 0xff, 0x20, 0x7f,
		0xff, 0xa0
	};
	// 'uB', 19x22px
	const unsigned char epd_bitmap_uB[] = {
		0xff, 0xff, 0xe0, 0xa0, 0x0f, 0xe0, 0xcf, 0xe7, 0xe0, 0xdf, 0xf3, 0xe0, 0xdf, 0xfb, 0xe0, 0xdf,
		0xfb, 0xe0, 0xdf, 0xfb, 0xe0, 0xdf, 0xf3, 0xe0, 0xdf, 0xe7, 0xe0, 0xdf, 0x8f, 0xe0, 0xc0, 0x3f,
		0xe0, 0xdc, 0x1f, 0xe0, 0xdf, 0xc7, 0xe0, 0xdf, 0xf3, 0xe0, 0xdf, 0xfb, 0xe0, 0xdf, 0xfb, 0xe0,
		0xdf, 0xfb, 0xe0, 0xdf, 0xfb, 0xe0, 0xdf, 0xfb, 0xe0, 0xc7, 0xf3, 0xe0, 0xd1, 0xe7, 0xe0, 0xdc,
		0x0f, 0xe0
	};
	// 'uC', 19x22px
	const unsigned char epd_bitmap_uC[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xf8, 0x07, 0xe0, 0xf3, 0xf1, 0xe0, 0xe7, 0xfc, 0xe0, 0xef,
		0xff, 0xe0, 0xcf, 0xff, 0xe0, 0xdf, 0xff, 0xe0, 0xdf, 0xff, 0xe0, 0x9f, 0xff, 0xe0, 0xbf, 0xff,
		0xe0, 0xbf, 0xff, 0xe0, 0xbf, 0xff, 0xe0, 0xbf, 0xff, 0xe0, 0xbf, 0xff, 0xe0, 0x9f, 0xff, 0xe0,
		0xdf, 0xfe, 0x60, 0xcf, 0xfe, 0xe0, 0xe7, 0xfc, 0xe0, 0xf3, 0xf9, 0xe0, 0xf8, 0x43, 0xe0, 0xff,
		0x1f, 0xe0
	};
	// 'uD', 19x22px
	const unsigned char epd_bitmap_uD[] = {
		0xff, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xe0, 0x0f, 0xe0, 0xef, 0xe1, 0xe0, 0xef, 0xfc, 0xe0, 0xef,
		0xfe, 0x60, 0xef, 0xff, 0x20, 0xef, 0xff, 0xa0, 0xef, 0xff, 0x80, 0xef, 0xff, 0xc0, 0xef, 0xff,
		0xc0, 0xef, 0xff, 0xc0, 0xef, 0xff, 0xc0, 0xef, 0xff, 0xc0, 0xef, 0xff, 0xc0, 0xef, 0xff, 0xc0,
		0xef, 0xff, 0x80, 0xef, 0xff, 0xa0, 0xef, 0xff, 0x20, 0xef, 0xfc, 0x60, 0xe7, 0xe1, 0xe0, 0xe8,
		0x0f, 0xe0
	};
	// 'uE', 19x22px
	const unsigned char epd_bitmap_uE[] = {
		0xff, 0xff, 0xe0, 0xe0, 0x01, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef,
		0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff,
		0xe0, 0xe0, 0x3f, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0,
		0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xe0,
		0x00, 0xe0
	};
	// 'uF', 19x22px
	const unsigned char epd_bitmap_uF[] = {
		0xff, 0xff, 0xe0, 0xe0, 0x01, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef,
		0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff,
		0xe0, 0xe0, 0x0f, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0,
		0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef,
		0xff, 0xe0
	};
	// 'uG', 19x22px
	const unsigned char epd_bitmap_uG[] = {
		0xff, 0xff, 0xe0, 0xfe, 0x1f, 0xe0, 0xf8, 0xc7, 0xe0, 0xf3, 0xf1, 0xe0, 0xe7, 0xfc, 0xe0, 0xcf,
		0xfe, 0xe0, 0xdf, 0xff, 0xe0, 0x9f, 0xff, 0xe0, 0xbf, 0xff, 0xe0, 0xbf, 0xff, 0xe0, 0xbf, 0xff,
		0xe0, 0xbf, 0x80, 0x60, 0xbf, 0xff, 0x60, 0xbf, 0xff, 0x60, 0xbf, 0xff, 0x60, 0xbf, 0xff, 0x60,
		0x9f, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xcf, 0xfe, 0x60, 0xe7, 0xfc, 0xe0, 0xf3, 0xe1, 0xe0, 0xf8,
		0x0f, 0xe0
	};
	// 'uH', 19x22px
	const unsigned char epd_bitmap_uH[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef,
		0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff,
		0x60, 0xe0, 0x00, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60,
		0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef, 0xff, 0x60, 0xef,
		0xff, 0x60
	};
	// 'uI', 19x22px
	const unsigned char epd_bitmap_uI[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xc0, 0x00, 0x60, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf,
		0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0,
		0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xc0,
		0x00, 0x60
	};
	// 'uJ', 19x22px
	const unsigned char epd_bitmap_uJ[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xc0, 0x00, 0x60, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff,
		0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef,
		0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0,
		0xff, 0xef, 0xe0, 0x7f, 0xcf, 0xe0, 0x7f, 0xdf, 0xe0, 0x3f, 0x9f, 0xe0, 0x9f, 0x3f, 0xe0, 0xc0,
		0x7f, 0xe0
	};
	// 'uK', 19x22px
	const unsigned char epd_bitmap_uK[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xdf, 0xf7, 0xe0, 0xdf, 0xe7, 0xe0, 0xdf, 0xcf, 0xe0, 0xdf,
		0x9f, 0xe0, 0xdf, 0x3f, 0xe0, 0xde, 0x7f, 0xe0, 0xdc, 0xff, 0xe0, 0xd9, 0xff, 0xe0, 0xd3, 0xff,
		0xe0, 0xc7, 0xff, 0xe0, 0xc7, 0xff, 0xe0, 0xd3, 0xff, 0xe0, 0xd9, 0xff, 0xe0, 0xdc, 0xff, 0xe0,
		0xde, 0x7f, 0xe0, 0xdf, 0x3f, 0xe0, 0xdf, 0x9f, 0xe0, 0xdf, 0xcf, 0xe0, 0xdf, 0xe7, 0xe0, 0xdf,
		0xf3, 0xe0
	};
	// 'uL', 19x22px
	const unsigned char epd_bitmap_uL[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef,
		0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff,
		0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0,
		0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xe0,
		0x01, 0xe0
	};
	// 'uM', 19x22px
	const unsigned char epd_bitmap_uM[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0x80, 0x5f, 0xff, 0x40, 0x6f, 0xfe, 0xc0, 0x77,
		0xfd, 0xc0, 0x7b, 0xfb, 0xc0, 0x7d, 0xf7, 0xc0, 0x7e, 0xef, 0xc0, 0x7f, 0x5f, 0xc0, 0x7f, 0xbf,
		0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0,
		0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f,
		0xff, 0xc0
	};
	// 'uN', 19x22px
	const unsigned char epd_bitmap_uN[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xcf, 0xff, 0x60, 0xc7, 0xff, 0x60, 0xd7,
		0xff, 0x60, 0xd3, 0xff, 0x60, 0xd9, 0xff, 0x60, 0xdd, 0xff, 0x60, 0xdc, 0xff, 0x60, 0xde, 0x7f,
		0x60, 0xdf, 0x7f, 0x60, 0xdf, 0x3f, 0x60, 0xdf, 0x9f, 0x60, 0xdf, 0xcf, 0x60, 0xdf, 0xef, 0x60,
		0xdf, 0xe7, 0x60, 0xdf, 0xf3, 0x60, 0xdf, 0xfb, 0x60, 0xdf, 0xf9, 0x60, 0xdf, 0xfc, 0x60, 0xdf,
		0xfe, 0x60
	};
	// 'uO', 19x22px
	const unsigned char epd_bitmap_uO[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfc, 0x07, 0xe0, 0xf1, 0xf1, 0xe0, 0xe7, 0xfc, 0xe0, 0xcf,
		0xfe, 0x60, 0xdf, 0xff, 0x20, 0x9f, 0xff, 0xa0, 0xbf, 0xff, 0xa0, 0xbf, 0xff, 0xa0, 0xbf, 0xff,
		0xa0, 0xbf, 0xff, 0xa0, 0xbf, 0xff, 0xa0, 0xbf, 0xff, 0xa0, 0xbf, 0xff, 0xa0, 0x9f, 0xff, 0x20,
		0xdf, 0xff, 0x60, 0xcf, 0xfe, 0x60, 0xe7, 0xfe, 0xe0, 0xf3, 0xfc, 0xe0, 0xf8, 0xf1, 0xe0, 0xfe,
		0x07, 0xe0
	};
	// 'uP', 19x22px
	const unsigned char epd_bitmap_uP[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xc0, 0x07, 0xe0, 0xdf, 0xf3, 0xe0, 0xdf, 0xf9, 0xe0, 0xdf,
		0xfd, 0xe0, 0xdf, 0xfd, 0xe0, 0xdf, 0xfd, 0xe0, 0xdf, 0xfd, 0xe0, 0xdf, 0xfd, 0xe0, 0xdf, 0xfd,
		0xe0, 0xdf, 0xfd, 0xe0, 0xdf, 0xf9, 0xe0, 0xdf, 0xc3, 0xe0, 0xc0, 0x1f, 0xe0, 0xdf, 0xff, 0xe0,
		0xdf, 0xff, 0xe0, 0xdf, 0xff, 0xe0, 0xdf, 0xff, 0xe0, 0xdf, 0xff, 0xe0, 0xdf, 0xff, 0xe0, 0xdf,
		0xff, 0xe0
	};
	// 'uQ', 19x22px
	const unsigned char epd_bitmap_uQ[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfc, 0x03, 0xe0, 0xf1, 0xf8, 0xe0, 0xc7, 0xfe, 0xe0, 0xdf,
		0xfe, 0x60, 0x9f, 0xff, 0x20, 0x3f, 0xff, 0x80, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff,
		0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xef, 0x80, 0x3f, 0xe7, 0xa0,
		0xbf, 0xf3, 0xa0, 0x9f, 0xf9, 0x20, 0xcf, 0xfc, 0x60, 0xe7, 0xfc, 0x60, 0xf1, 0xe1, 0x20, 0xfc,
		0x0f, 0x80
	};
	// 'uR', 19x22px
	const unsigned char epd_bitmap_uR[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xc0, 0x1f, 0xe0, 0xdf, 0xc7, 0xe0, 0xdf, 0xf3, 0xe0, 0xdf,
		0xf9, 0xe0, 0xdf, 0xfd, 0xe0, 0xdf, 0xfd, 0xe0, 0xdf, 0xfd, 0xe0, 0xdf, 0xfd, 0xe0, 0xdf, 0xf9,
		0xe0, 0xdf, 0xf3, 0xe0, 0xdf, 0xe7, 0xe0, 0xc0, 0x0f, 0xe0, 0xde, 0x7f, 0xe0, 0xdf, 0x3f, 0xe0,
		0xdf, 0xbf, 0xe0, 0xdf, 0x9f, 0xe0, 0xdf, 0xcf, 0xe0, 0xdf, 0xe7, 0xe0, 0xdf, 0xf7, 0xe0, 0xdf,
		0xf3, 0xe0
	};
	// 'uS', 19x22px
	const unsigned char epd_bitmap_uS[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfc, 0x1f, 0xe0, 0xe1, 0xc3, 0xe0, 0xcf, 0xf9, 0xe0, 0xdf,
		0xfc, 0xe0, 0x9f, 0xff, 0xe0, 0xbf, 0xff, 0xe0, 0xbf, 0xff, 0xe0, 0xbf, 0xff, 0xe0, 0x9f, 0xff,
		0xe0, 0xce, 0x0f, 0xe0, 0xe0, 0xe1, 0xe0, 0xff, 0xfc, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0,
		0xff, 0xfe, 0xe0, 0xff, 0xfc, 0xe0, 0x9f, 0xfd, 0xe0, 0xcf, 0xf9, 0xe0, 0xe1, 0xe3, 0xe0, 0xfc,
		0x0f, 0xe0
	};
	// 'uT', 19x22px
	const unsigned char epd_bitmap_uT[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xc0, 0x00, 0x60, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf,
		0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0,
		0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0
	};
	// 'uU', 19x22px
	const unsigned char epd_bitmap_uU[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf,
		0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff,
		0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60,
		0xdf, 0xff, 0x60, 0xcf, 0xfe, 0x60, 0xef, 0xfe, 0xe0, 0xe3, 0xf8, 0xe0, 0xf8, 0xe3, 0xe0, 0xfe,
		0x0f, 0xe0
	};
	// 'uV', 19x22px
	const unsigned char epd_bitmap_uV[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xbf, 0xff, 0xc0, 0xbf, 0xff, 0xc0, 0xbf, 0xff, 0x80, 0x9f,
		0xff, 0xa0, 0xdf, 0xff, 0xa0, 0xdf, 0xff, 0x20, 0xcf, 0xff, 0x60, 0xef, 0xff, 0x60, 0xe7, 0xfe,
		0x60, 0xf7, 0xfe, 0xe0, 0xf7, 0xfc, 0xe0, 0xf3, 0xf9, 0xe0, 0xfb, 0xfb, 0xe0, 0xf9, 0xf3, 0xe0,
		0xfd, 0xf7, 0xe0, 0xfc, 0xe7, 0xe0, 0xfe, 0xef, 0xe0, 0xfe, 0x4f, 0xe0, 0xff, 0x5f, 0xe0, 0xff,
		0x1f, 0xe0
	};
	// 'uW', 19x22px
	const unsigned char epd_bitmap_uW[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0xbf,
		0xff, 0xa0, 0xbf, 0xff, 0xa0, 0xbf, 0xff, 0xa0, 0xbf, 0xff, 0xa0, 0xbf, 0xbf, 0xa0, 0xdf, 0xbf,
		0x60, 0xdf, 0x5f, 0x60, 0xdf, 0x5f, 0x60, 0xdf, 0x5f, 0x60, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
		0xee, 0xee, 0xe0, 0xed, 0xf6, 0xe0, 0xed, 0xf6, 0xe0, 0xf5, 0xf5, 0xe0, 0xf3, 0xf9, 0xe0, 0xf3,
		0xf9, 0xe0
	};
	// 'uX', 19x22px
	const unsigned char epd_bitmap_uX[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0x60, 0x7f, 0xfe, 0x60, 0x3f, 0xfc, 0xe0, 0x9f, 0xfd, 0xe0, 0xcf,
		0xf9, 0xe0, 0xe7, 0xf3, 0xe0, 0xf3, 0xf7, 0xe0, 0xf9, 0xe7, 0xe0, 0xfc, 0xcf, 0xe0, 0xfe, 0x1f,
		0xe0, 0xff, 0x3f, 0xe0, 0xfe, 0x1f, 0xe0, 0xfe, 0xcf, 0xe0, 0xfc, 0xe7, 0xe0, 0xf9, 0xf7, 0xe0,
		0xf3, 0xf3, 0xe0, 0xe7, 0xf9, 0xe0, 0xcf, 0xfc, 0xe0, 0x9f, 0xfe, 0x60, 0x3f, 0xff, 0x20, 0x7f,
		0xff, 0xa0
	};
	// 'uY', 19x22px
	const unsigned char epd_bitmap_uY[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0x60, 0x3f, 0xfe, 0x60, 0x9f, 0xfc, 0xe0, 0xcf,
		0xf9, 0xe0, 0xe7, 0xf3, 0xe0, 0xf3, 0xe7, 0xe0, 0xf9, 0xcf, 0xe0, 0xfc, 0x9f, 0xe0, 0xfe, 0x3f,
		0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0,
		0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff,
		0x7f, 0xe0
	};
	// 'uZ', 19x22px
	const unsigned char epd_bitmap_uZ[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0x80, 0xff,
		0xff, 0x20, 0xff, 0xff, 0x60, 0xff, 0xfe, 0x60, 0xff, 0xfc, 0xe0, 0xff, 0xf9, 0xe0, 0xff, 0xf3,
		0xe0, 0xff, 0xe7, 0xe0, 0xff, 0xcf, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0x9f, 0xe0, 0xff, 0x3f, 0xe0,
		0xfe, 0x7f, 0xe0, 0xfc, 0xff, 0xe0, 0xf9, 0xff, 0xe0, 0xf3, 0xff, 0xe0, 0xe7, 0xff, 0xe0, 0xc0,
		0x00, 0x00
	};
	// 'openbrak', 19x22px
	const unsigned char epd_bitmap_openbrak[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfc, 0x07, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd,
		0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff,
		0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0,
		0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfc,
		0x07, 0xe0
	};
	// 'backslash', 19x22px
	const unsigned char epd_bitmap_backslash[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xfb,
		0xff, 0xe0, 0xfb, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfd, 0xff, 0xe0, 0xfe, 0xff, 0xe0, 0xfe, 0xff,
		0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xdf, 0xe0,
		0xff, 0xdf, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff,
		0xfb, 0xe0
	};
	// 'closebrak', 19x22px
	const unsigned char epd_bitmap_closebrak[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfc, 0x07, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff,
		0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7,
		0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0,
		0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xf7, 0xe0, 0xfc,
		0x07, 0xe0
	};
	// 'power', 19x22px
	const unsigned char epd_bitmap_power[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0x5f, 0xe0, 0xfe, 0xef, 0xe0, 0xfd,
		0xf7, 0xe0, 0xfb, 0xfb, 0xe0, 0xf7, 0xfd, 0xe0, 0xef, 0xfe, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// 'underscore', 19x22px
	const unsigned char epd_bitmap_underscore[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xc0,
		0x00, 0x60
	};
	// 'idk', 19x22px
	const unsigned char epd_bitmap_idk[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfe, 0x7f, 0xe0, 0xfe, 0x3f, 0xe0, 0xff, 0x1f, 0xe0, 0xff,
		0x9f, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	// 'a', 19x22px
	const unsigned char epd_bitmap_a[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xfe,
		0xe0, 0xf8, 0x1d, 0xe0, 0xf3, 0xe5, 0xe0, 0xf7, 0xf1, 0xe0, 0xe7, 0xfd, 0xe0, 0xef, 0xfd, 0xe0,
		0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xf8, 0xe0, 0xe7, 0xf2, 0xe0, 0xf1, 0xc6, 0x60, 0xfc,
		0x1f, 0x20
	};
	// 'b', 19x22px
	const unsigned char epd_bitmap_b[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef,
		0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff,
		0xe0, 0xe8, 0x1f, 0xe0, 0xe3, 0xe7, 0xe0, 0xe7, 0xf3, 0xe0, 0xe7, 0xfd, 0xe0, 0xef, 0xfd, 0xe0,
		0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xf9, 0xe0, 0xe7, 0xf3, 0xe0, 0xf1, 0xc7, 0xe0, 0xfc,
		0x1f, 0xe0
	};
	// 'c', 19x22px
	const unsigned char epd_bitmap_c[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xf8, 0x0f, 0xe0, 0xf3, 0xe7, 0xe0, 0xe7, 0xf3, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0,
		0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xfb, 0xe0, 0xe7, 0xf3, 0xe0, 0xf1, 0xc7, 0xe0, 0xfc,
		0x1f, 0xe0
	};
	// 'd', 19x22px
	const unsigned char epd_bitmap_d[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff,
		0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd,
		0xe0, 0xf8, 0x0d, 0xe0, 0xf3, 0xe5, 0xe0, 0xe7, 0xf1, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0,
		0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xf9, 0xe0, 0xe7, 0xf1, 0xe0, 0xf1, 0xc5, 0xe0, 0xfc,
		0x1d, 0xe0
	};
	// 'e', 19x22px
	const unsigned char epd_bitmap_e[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xf8, 0x07, 0xe0, 0xf3, 0xf3, 0xe0, 0xe7, 0xfb, 0xe0, 0xe1, 0xe3, 0xe0, 0xec, 0x0f, 0xe0,
		0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xfb, 0xe0, 0xe7, 0xf3, 0xe0, 0xf1, 0xc7, 0xe0, 0xfc,
		0x1f, 0xe0
	};
	// 'f', 19x22px
	const unsigned char epd_bitmap_f[] = {
		0xff, 0xff, 0xe0, 0xfc, 0x07, 0xe0, 0xf9, 0xf3, 0xe0, 0xf3, 0xf9, 0xe0, 0xe7, 0xfd, 0xe0, 0xef,
		0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff,
		0xe0, 0x80, 0x7f, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0,
		0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef,
		0xff, 0xe0
	};
	// 'g', 19x22px
	const unsigned char epd_bitmap_g[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfc, 0x06, 0xe0, 0xf9, 0xf0, 0xe0, 0xf3,
		0xf9, 0xe0, 0xe7, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xf9, 0xe0, 0xe7, 0xf9,
		0xe0, 0xf0, 0x05, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0,
		0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xf9, 0xe0, 0xe7, 0xf3, 0xe0, 0xf0,
		0x07, 0xe0
	};
	// 'h', 19x22px
	const unsigned char epd_bitmap_h[] = {
		0xff, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef,
		0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff,
		0xe0, 0xe8, 0x07, 0xe0, 0xe3, 0xf3, 0xe0, 0xe7, 0xf9, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xfc, 0xe0,
		0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0, 0xef,
		0xfe, 0xe0
	};
	// 'i', 19x22px
	const unsigned char epd_bitmap_i[] = {
		0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf,
		0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0,
		0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0
	};
	// 'j', 19x22px
	const unsigned char epd_bitmap_j[] = {
		0xff, 0xff, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe,
		0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0,
		0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xbe, 0xe0, 0xff, 0x9c, 0xe0, 0xff,
		0xc1, 0xe0
	};
	// 'k', 19x22px
	const unsigned char epd_bitmap_k[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xef, 0xf7, 0xe0, 0xef,
		0xe7, 0xe0, 0xef, 0xcf, 0xe0, 0xef, 0x9f, 0xe0, 0xef, 0x3f, 0xe0, 0xee, 0x7f, 0xe0, 0xec, 0xff,
		0xe0, 0xe8, 0x0f, 0xe0, 0xeb, 0xe7, 0xe0, 0xe7, 0xf3, 0xe0, 0xe7, 0xf9, 0xe0, 0xef, 0xfd, 0xe0,
		0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef,
		0xfd, 0xe0
	};
	// 'l', 19x22px
	const unsigned char epd_bitmap_l[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf,
		0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0,
		0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0
	};
	// 'm', 19x22px
	const unsigned char epd_bitmap_m[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xd0, 0x60, 0xe0, 0xd7, 0x0e, 0xe0, 0xcf, 0xbe, 0x60, 0xdf, 0xbf, 0x60, 0xdf, 0xbf, 0x60,
		0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf,
		0xff, 0x60
	};
	// 'n', 19x22px
	const unsigned char epd_bitmap_n[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xf4, 0x07, 0xe0, 0xf5, 0xf3, 0xe0, 0xf3, 0xf9, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0,
		0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7,
		0xfd, 0xe0
	};
	// 'o', 19x22px
	const unsigned char epd_bitmap_o[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfc, 0x07,
		0xe0, 0xf1, 0xf1, 0xe0, 0xe7, 0xfc, 0xe0, 0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0,
		0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0, 0xe7, 0xfc, 0xe0, 0xf3, 0xf9, 0xe0, 0xf8, 0xe3, 0xe0, 0xfe,
		0x0f, 0xe0
	};
	// 'p', 19x22px
	const unsigned char epd_bitmap_p[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xf7, 0x07, 0xe0, 0xf4, 0x71, 0xe0, 0xf1,
		0xfc, 0xe0, 0xf3, 0xfe, 0xe0, 0xf7, 0xfe, 0xe0, 0xf7, 0xfe, 0xe0, 0xf7, 0xfe, 0xe0, 0xf7, 0xfe,
		0xe0, 0xf1, 0xfc, 0xe0, 0xf4, 0xf9, 0xe0, 0xf6, 0x03, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0,
		0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7,
		0xff, 0xe0
	};
	// 'q', 19x22px
	const unsigned char epd_bitmap_q[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xfc, 0x1d, 0xe0, 0xf1, 0xc5, 0xe0, 0xe7,
		0xf1, 0xe0, 0xef, 0xf9, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xfd, 0xe0, 0xef, 0xfd,
		0xe0, 0xe7, 0xf1, 0xe0, 0xf3, 0xe5, 0xe0, 0xf8, 0x0d, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0,
		0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff, 0xfd, 0xe0, 0xff,
		0xfd, 0xe0
	};
	// 'r', 19x22px
	const unsigned char epd_bitmap_r[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xf4, 0x07, 0xe0, 0xf5, 0xf3, 0xe0, 0xf3, 0xf9, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xff, 0xe0,
		0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7, 0xff, 0xe0, 0xf7,
		0xff, 0xe0
	};
	// 's', 19x22px
	const unsigned char epd_bitmap_s[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xf8, 0x07,
		0xe0, 0xf3, 0xf9, 0xe0, 0xf7, 0xff, 0xe0, 0xe7, 0xff, 0xe0, 0xef, 0xff, 0xe0, 0xe0, 0x3f, 0xe0,
		0xff, 0xc1, 0xe0, 0xff, 0xfc, 0xe0, 0xff, 0xfe, 0xe0, 0xff, 0xfe, 0xe0, 0xc7, 0xfc, 0xe0, 0xf0,
		0x01, 0xe0
	};
	// 't', 19x22px
	const unsigned char epd_bitmap_t[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xf8, 0x03,
		0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0,
		0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0
	};
	// 'u', 19x22px
	const unsigned char epd_bitmap_u[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0,
		0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf7, 0xfd, 0xe0, 0xf3, 0xf9, 0xe0, 0xf5, 0xf3, 0xe0, 0xf4,
		0x07, 0xe0
	};
	// 'v', 19x22px
	const unsigned char epd_bitmap_v[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xef, 0xfe, 0xe0, 0xef, 0xfe, 0xe0, 0xe7, 0xfc, 0xe0, 0xf7, 0xfd, 0xe0, 0xf3, 0xf9, 0xe0,
		0xfb, 0xf3, 0xe0, 0xf9, 0xf7, 0xe0, 0xfc, 0xe7, 0xe0, 0xfe, 0xef, 0xe0, 0xfe, 0x4f, 0xe0, 0xff,
		0x1f, 0xe0
	};
	// 'w', 19x22px
	const unsigned char epd_bitmap_w[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60, 0xdf, 0xff, 0x60,
		0xdf, 0xff, 0x60, 0xdf, 0xbf, 0x60, 0xdf, 0xbf, 0x60, 0xcf, 0xbe, 0x60, 0xe7, 0x0e, 0xe0, 0xf0,
		0x60, 0xe0
	};
	// 'x', 19x22px
	const unsigned char epd_bitmap_x[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xef, 0xfd,
		0xe0, 0xe7, 0xf9, 0xe0, 0xf3, 0xf3, 0xe0, 0xf9, 0xe7, 0xe0, 0xfc, 0x4f, 0xe0, 0xff, 0x1f, 0xe0,
		0xff, 0x1f, 0xe0, 0xfe, 0x4f, 0xe0, 0xfc, 0xe7, 0xe0, 0xf1, 0xf3, 0xe0, 0xe7, 0xf9, 0xe0, 0xcf,
		0xfc, 0xe0
	};
	// 'y', 19x22px
	const unsigned char epd_bitmap_y[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0x7f, 0xa0, 0xff, 0x7f, 0x20, 0xff, 0x3f, 0x60, 0xff, 0xbe, 0x60, 0xff, 0x9e, 0xe0, 0xff, 0xcc,
		0xe0, 0xff, 0xe9, 0xe0, 0xff, 0xe3, 0xe0, 0xff, 0xf7, 0xe0, 0xff, 0xe7, 0xe0, 0xff, 0xef, 0xe0,
		0xff, 0xcf, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0x9f, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0x3f, 0xe0, 0xff,
		0x7f, 0xe0
	};
	// 'z', 19x22px
	const unsigned char epd_bitmap_z[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
		0xe0, 0xff, 0xfc, 0x60, 0xe0, 0x00, 0xe0, 0xef, 0xf9, 0xe0, 0xff, 0xe3, 0xe0, 0xff, 0xcf, 0xe0,
		0xff, 0x1f, 0xe0, 0xfe, 0x7f, 0xe0, 0xf8, 0xff, 0xe0, 0xf3, 0xff, 0xe0, 0xe7, 0xff, 0xe0, 0xc0,
		0x00, 0xe0
	};
	// 'openbrace', 19x22px
	const unsigned char epd_bitmap_openbrace[] = {
		0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xfe, 0xff, 0xe0, 0xfe,
		0xff, 0xe0, 0xfe, 0xff, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0x7f,
		0xe0, 0xfc, 0xff, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0,
		0xfe, 0xff, 0xe0, 0xfe, 0xff, 0xe0, 0xfe, 0xff, 0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0xe0, 0xff,
		0xbf, 0xe0
	};
	// 'line', 19x22px
	const unsigned char epd_bitmap_line[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf,
		0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0,
		0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xbf, 0xe0, 0xff,
		0xbf, 0xe0
	};
	// 'closebrace', 19x22px
	const unsigned char epd_bitmap_closebrace[] = {
		0xff, 0xff, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xef, 0xe0, 0xff,
		0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xdf,
		0xe0, 0xff, 0xe7, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xbf, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xdf, 0xe0,
		0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xef, 0xe0, 0xff, 0xdf, 0xe0, 0xff, 0xdf, 0xe0, 0xff,
		0xbf, 0xe0
	};
	// 'tilde', 19x22px
	const unsigned char epd_bitmap_tilde[] = {
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xf9, 0xff, 0xe0, 0xf6, 0xff, 0xe0, 0xef, 0x7d,
		0xe0, 0xff, 0xbb, 0xe0, 0xff, 0xc7, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0,
		0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff,
		0xff, 0xe0
	};
	const unsigned char epd_bitmap_space[] = {
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff
	};

	//TODO: need to put this on heap
	const unsigned char* firstFontData[epd_bitmap_allArray_LEN] = {
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		epd_bitmap_space, // space 32
		epd_bitmap_exmark,
		epd_bitmap_quote,
		epd_bitmap_pound,
		epd_bitmap_cash,
		epd_bitmap_percent,
		epd_bitmap_and,
		epd_bitmap_singlequote,
		epd_bitmap_openparenth,
		epd_bitmap_closeparenth,
		epd_bitmap_star,
		epd_bitmap_plus,
		epd_bitmap_comma,
		epd_bitmap_minus,
		epd_bitmap_period,
		epd_bitmap_forwardslash,
		epd_bitmap_0,// 0 48
		epd_bitmap_1,
		epd_bitmap_2,
		epd_bitmap_3,
		epd_bitmap_4,
		epd_bitmap_5,
		epd_bitmap_6,
		epd_bitmap_7,
		epd_bitmap_8,
		epd_bitmap_9,// 9 57
		epd_bitmap_colon,
		epd_bitmap_semicolon,
		epd_bitmap_less,
		epd_bitmap_equal,
		epd_bitmap_greatr,
		epd_bitmap_questionmark,
		epd_bitmap_atsymbol,
		epd_bitmap_uA, // A 65
		epd_bitmap_uB,
		epd_bitmap_uC,
		epd_bitmap_uD,
		epd_bitmap_uE,
		epd_bitmap_uF,
		epd_bitmap_uG,
		epd_bitmap_uH,
		epd_bitmap_uI,
		epd_bitmap_uJ,
		epd_bitmap_uK,
		epd_bitmap_uL,
		epd_bitmap_uM,
		epd_bitmap_uN,
		epd_bitmap_uO,
		epd_bitmap_uP,
		epd_bitmap_uQ,
		epd_bitmap_uR,
		epd_bitmap_uS,
		epd_bitmap_uT,
		epd_bitmap_uU,
		epd_bitmap_uV,
		epd_bitmap_uW,
		epd_bitmap_uX,
		epd_bitmap_uY,
		epd_bitmap_uZ,// Z 90
		epd_bitmap_openbrak,
		epd_bitmap_backslash,
		epd_bitmap_closebrak,
		epd_bitmap_power,
		epd_bitmap_underscore,
		epd_bitmap_idk,
		epd_bitmap_a, // 97 a
		epd_bitmap_b,
		epd_bitmap_c,
		epd_bitmap_d,
		epd_bitmap_e,
		epd_bitmap_f,
		epd_bitmap_g,
		epd_bitmap_h,
		epd_bitmap_i,
		epd_bitmap_j,
		epd_bitmap_k,
		epd_bitmap_l,
		epd_bitmap_m,
		epd_bitmap_n,
		epd_bitmap_o,
		epd_bitmap_p,
		epd_bitmap_q,
		epd_bitmap_r,
		epd_bitmap_s,
		epd_bitmap_t,
		epd_bitmap_u,
		epd_bitmap_v,
		epd_bitmap_w,
		epd_bitmap_x,
		epd_bitmap_y,
		epd_bitmap_z,// z 122
		epd_bitmap_openbrace,
		epd_bitmap_line,
		epd_bitmap_closebrace,
		epd_bitmap_tilde,
		nullptr // DEL 127
	};


	CustRender::CompileFont(firstFontData, sizeof(epd_bitmap_0), firstFontCompiled, 19, 22);
}

void CustRender::DebugPrint(int x, int y, std::string text, ColorM clr, float textScale, int pixelSize)
{
/*	int xStep = x;

	int numOfBytes = 66;// the number of bytes in each character array

	for (int i = 0; i < text.size(); i++) // loops through each character in the string
	{
		int xOffset = 0;// the line for the drawing queue
		int yOffset = 0;
		int yStep = y + 22; // top of the character space

		int curChar = static_cast<int>(text[i]); // converts the char to an int
		const unsigned char* dataPtr = firstFontData[curChar]; // gets the char draw data
		if (!dataPtr) // if the char draw data is nullptr then skip
			continue;

	//	CompiledCharData& charData = firstFontCompiled[curChar];

		for (int ii = 0; ii < numOfBytes; ii++)// loops through all the bytes in the char draw data array
		{
			unsigned char curData = dataPtr[ii];// gets the specific byte in the array

			if (xOffset >= 19) // reached the end of this line to draw
			{
				xOffset = 0;// reset the line for the drawing queue
				yOffset -= 1; // goes down to ready the next line for drawing
			}
			
			for (int iii = 7; iii >= 0; iii--)// reverse reads the bits in the byte
			{
				if (xOffset >= 19) // breaks the loop when reaching the end of the line just how the data is formatted for the converter i used
					break;
				if (!(curData & (1 << iii)))// if there is no bit in this position draw a pixel
				{
					CustRender::drawRect(xStep + xOffset * textScale, yStep + yOffset * textScale, pixelSize, pixelSize, clr); // drawing the pixel		
				}

				xOffset += textScale;// continues the line
			}
			
		}
		xStep += 19;// moves to the next space to draw a new character because this one has been completed
	}*/
}

StringFormation::StringFormation(int xPos, int yPos, std::string sText, CompiledCharData* cFont, ColorM clrc, float fTextScale, int iPixelSize, int iMode)
{
	textScale = fTextScale / static_cast<float>(I::baseClass->particleSize);
	pixelSize = iPixelSize;
	clr = clrc;
	textData = "";
	chosenFont = cFont;
	x = xPos;
	y = yPos;
	manualRender = false;
	mode = iMode;

	SetString(sText);
}

void StringFormation::Render()
{
	glEnableClientState(GL_VERTEX_ARRAY);

	glColor3f(clr.r, clr.g, clr.b);
	for (int i = 0; i < stringData.size(); i++)
	{
		CompiledCharData& charRef = stringData[i];
		if ( charRef.charData.size() == 0)
			continue;
		glVertexPointer(2, GL_FLOAT, sizeof(Vec2Df), &charRef.charData[0].x);
		glPointSize(pixelSize);
		glDrawArrays(GL_POINTS, 0, charRef.charData.size());
	}

	glDisableClientState(GL_VERTEX_ARRAY);

	glEnd();
}

void StringFormation::SetString(std::string sText) // not very efficient but idc for now
{
	if (sText == textData)
		return;

	stringData.clear();

	float xStep = x;
	float yStep = y;

	for (int i = 0; i < sText.size(); i++) // loops through each character in the string
	{
		int curChar = static_cast<int>(sText[i]); // converts the char to an int

		stringData.push_back(chosenFont[curChar]);

		if (textScale != 1.f)
		{
			stringData[i].ScaleChar(textScale);
		}

		stringData[i].MoveChar(xStep - stringData[i].leftOffset * textScale, yStep);

		xStep += (stringData[i].rightOffset - stringData[i].leftOffset) * textScale;// moves to the next space to draw a new character because this one has been completed
	}

	width = x - xStep;
	height = chosenFont['a'].height * textScale;

	if (mode == 1) // x center
		SetPos(x + (x - xStep) * .5f, y);
	else if (mode == 2) // y center
		SetPos(x, y - (height * .5));
	else if (mode == 3) // xy center
		SetPos(x + width * .5f, y - height * .5);

	textData = sText;
}

void StringFormation::SetPos(float newx, float newy)
{
	if (newx == x && newy == y)
		return;

	float xDelta = newx - x;
	float yDelta = newy - y;

	for (CompiledCharData& theChar : stringData)
		theChar.MoveChar(xDelta, yDelta);

	x = newx;
	y = newy;
}

void CustRender::drawRect(double x1, double y1, double x2, double y2, ColorM clr)
{
	glColor3f(clr.r, clr.g, clr.b);
	glBegin(GL_POLYGON);

	glVertex2d(x1, y1);
	glVertex2d(x1, y1 + y2);
	glVertex2d(x1 + x2, y1 + y2);
	glVertex2d(x1 + x2, y1);

	glEnd();
	//    glFlush();
}

void CustRender::drawProjectedLine(float x1, float y1, float ang, float len, ColorM clr)
{
	float fCos = cos(Math::DegToRad(ang));
	float fSin = sin(Math::DegToRad(ang));

	glColor3f(clr.r, clr.g, clr.b);
	glPointSize(I::baseClass->particleSize);
	glBegin(GL_POINTS);

	for (float i = 0.f; i <= len; i += 1.f)
	{
		glVertex2d(static_cast<int>(x1 + i * fCos), static_cast<int>(y1 + i * fSin));
	}

	glEnd();
}

void CustRender::drawPoint(float x, float y, int size, ColorM clr)
{
	glColor3f(clr.r, clr.g, clr.b);
	glPointSize(size);
	glBegin(GL_POINTS);

	glVertex2d(x, y);

	glEnd();
}

StringFormation* StringFormation::setManualRender(bool val)
{
	manualRender = val;
	return this;
}

void CustRender::FilledRect(float x, float y, float w, float h, ColorM clr)
{
	glColor3f(clr.r, clr.g, clr.b);
	glBegin(GL_POLYGON);

	glVertex2d(x, y);
	glVertex2d(x, y + h);
	glVertex2d(x + w, y + h);
	glVertex2d(x + w, y);

	glEnd();
}

void CustRender::Rect(float x, float y, float w, float h, ColorM clr)
{
	FilledRect(x, y, 1, h, clr); // left
	FilledRect(x, y + h - 1, w, 1, clr); //top
	FilledRect(x + w - 1, y, 1, h, clr);// right
	FilledRect(x, y, w, 1, clr); // bottom
}

void CustRender::Line(float x, float y, float x1, float y1, ColorM clr)
{
	Vec2Df src = { x, y }, dest = { x1,y1 };
	float dist = Math::CalcDistance(src, dest);
	float ang = Math::CalcAngle(src, dest);

	drawProjectedLine(x, y, ang, dist, clr);
}

void CustRender::GradRect(int x, int y, int w, int h, int gradw, float scale, ColorM clr)
{
/*	float ogAlpha
	for (int gay = 0; ((gradw > 0) ? (gay <= gradw) : (gay >= gradw)); ((gradw > 0) ? gay++ : gay--))
	{
		I::Surface->SetDrawingColor(clr.r(), clr.g(), clr.b(), clr.a() - std::clamp(fabs(static_cast<float>(gay)) * scale, 0.f, static_cast<float>(clr.a())));
		I::Surface->DrawRectangle(gay + (x), gay + (y), (w)-(gay * 2), (h)-(gay * 2));

		Rect
	}*/
}

ColorM defBackgroundClr = ColorM(.5f, .5f, .5f);
ColorM defOutlineClr = ColorM(1.f, 1.f, 1.f);

void CustRender::DefaultTheme(C_BaseUIComponent* ecx)
{
	FilledRect(ecx->x_off, ecx->y_off, ecx->w_off, ecx->h_off, defBackgroundClr);
	Rect(ecx->x_off, ecx->y_off, ecx->w_off, ecx->h_off, defOutlineClr);
}

ColorM redBackgroundClr = ColorM(.8f, .5f, .5f);

void CustRender::RedTheme(C_BaseUIComponent* ecx)
{
	FilledRect(ecx->x_off, ecx->y_off, ecx->w_off, ecx->h_off, redBackgroundClr);
	Rect(ecx->x_off, ecx->y_off, ecx->w_off, ecx->h_off, defOutlineClr);
}

void CDraw::Update(int ix, int iy, int iw, int ih, ColorM cclr)
{
	x = ix;
	y = iy;
	w = iw;
	h = ih;
	clr = cclr;
}

void CDraw::Update(int ix, int iy, int iw, int ih)
{
	x = ix;
	y = iy;
	w = iw;
	h = ih;
}

void CDraw::Update(int ix, int iy)
{
	x = ix;
	y = iy;
}

void CDraw::Update(ColorM cclr)
{
	clr = cclr;
}

void CDraw::Update(std::string ctext)
{
	text = ctext;
}

void CDFilledRect::Render()
{
	if (clr.a == 0)
		return;

	CustRender::FilledRect(x - .5f, y - .5f, w + 1.f, h + 1.f, clr);
}

void CDRect::Render()
{
	if (clr.a == 0)
		return;

	CustRender::Rect(x - .5f, y - .5f, w + 1.f, h + 1.f, clr);
}

void CDLine::Render()
{
	if (clr.a == 0)
		return;

	CustRender::Line(x, y, w, h, clr);
}

void CDLine::Update(int ix, int iy)
{
	w += ix - x;
	h += iy - y;
	x = ix;
	y = iy;
}

void CDText::Render()
{
	if (clr.a == 0)
		return;

	strForm->SetPos(x, y);
	strForm->SetString(text);
	strForm->Render();
}

void CDGradRect::Render()
{
	if (clr.a == 0)
		return;

//	Render::GradRect(x, y, w, h, gradw, scale, clr);
}

